from syzoj import db
from random import randint
import time

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True)
    email = db.Column(db.String(120))
    password = db.Column(db.String(120))

    session_id = db.Column(db.String(120))

    nickname = db.Column(db.String(80))
    nameplate = db.Column(db.Text)
    information = db.Column(db.Text)

    is_admin = db.Column(db.Boolean)

    def make_session_id(self):
        self.session_id = str(randint(1, int(1e50)))

    def __init__(self, username, passowrd, email):
        self.username = username
        self.password = password
        self.email = email

        self.nickname = username
        self.is_admin = False
        self.make_session_id()

    def __repr__(self):
        return "<User:%r password:%r email:%r>" % (self.username, self.password, self.email)

    def save(self):
        db.session.add(self)
        db.session.commit()


tags_table = db.Table('problem_tags',
                      db.Column('tag_id', db.Integer, db.ForeignKey('problem_tag.id')),
                      db.Column('problem_id', db.Integer, db.ForeignKey('problem.id'))
                      )


class Problem(db.Model):
    id = db.Column(db.Integer, primary_key=True)

    title = db.Column(db.String(80))
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"))
    user = db.relationship("User", backref=db.backref("upload_problems", lazy='dynamic'))

    description = db.Column(db.Text)
    input_format = db.Column(db.Text)
    output_format = db.Column(db.Text)
    example = db.Column(db.Text)
    limit_and_hint = db.Column(db.Text)

    time_limit = db.Column(db.Integer)
    memory_limit = db.Column(db.Integer)

    tags = db.relationship('ProblemTag', secondary=tags_table,
                           backref=db.backref('problems', lazy='dynamic'))

    ac_num = db.Column(db.Integer)
    submit_num = db.Column(db.Integer)

    def __init__(self, title, user,
                 description=None, input_format=None, output_format=None, example=None, limit_and_hint=None,
                 time_limit=None, memory_limit=None,
                 tags=None):
        self.title = title
        self.user = user

        self.description = description
        self.input_format = input_format
        self.output_format = output_format
        self.example = example
        self.limit_and_hint = limit_and_hint

        time_limit = time_limit
        memory_limit = memory_limit
        self.tags = tags
        self.ac_num = 0
        self.submit_num = 0

    def __repr__(self):
        return "<Problem %r>" % self.title

    def save(self):
        db.session.add(self)
        db.session.commit()


class ProblemTag(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80))

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return "<Tag %r>" % self.name

    def save(self):
        db.session.add(self)
        db.session.commit()


problems_table = db.Table('contest_problems',
                          db.Column('problem_id', db.Integer, db.ForeignKey('problem.id')),
                          db.Column('contest_id', db.Integer, db.ForeignKey('contest.id'))
                          )
players_table = db.Table('contest_players',
                         db.Column('player_id', db.Integer, db.ForeignKey('user.id')),
                         db.Column('contest_id', db.Integer, db.ForeignKey('contest.id'))
                         )


class Contest(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(80))
    start_time = db.Column(db.Integer)  # googbye at 2038-1-19
    end_time = db.Column(db.Integer)

    holder_id = db.Column(db.Integer, db.ForeignKey("user.id"))
    holder = db.relationship("User", backref=db.backref("hold_contests", lazy='dynamic'))

    problems = db.relationship('Problem', secondary=problems_table, backref=db.backref('contests', lazy='dynamic'))
    information = db.Column(db.Text)

    player = db.relationship('User', secondary=players_table, backref=db.backref('contests', lazy='dynamic'))

    def __init__(self, title, start_time, end_time, holder):
        self.title = title
        self.start_time = start_time
        self.end_time = end_time
        self.holder = holder

    def __repr__(self):
        print "<Contest %r>" % self.title

    def save(self):
        db.session.add(self)
        db.session.commit()


class JudgeState(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    code = db.Column(db.Text)
    language = db.Column(db.String(20))
    result = db.Column(db.Text)

    user_id = db.Column(db.Integer, db.ForeignKey("user.id"))
    user = db.relationship("User", backref=db.backref("submit", lazy='dynamic'))

    problem_id = db.Column(db.Integer, db.ForeignKey("problem.id"))
    problem = db.relationship("Problem", backref=db.backref("submit", lazy='dynamic'))

    submit_time = db.Column(db.Integer)  # googbye at 2038-1-19

    def __int__(self, code, language, user, problem, submit_time=int(time.time())):
        self.code = code
        self.language = language
        self.user = user
        self.problem = problem
        self.submit_time = submit_time

    def __repr__(self):
        print "<JudgeState %r>" % self.id

    def save(self):
        db.session.add(self)
        db.session.commit()


class Article(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(80))
    content = db.Column(db.Text)

    user_id = db.Column(db.Integer, db.ForeignKey("user.id"))
    user = db.relationship("User", backref=db.backref("articles", lazy='dynamic'))

    public_time = db.Column(db.Integer)  # googbye at 2038-1-19
    update_time = db.Column(db.Integer)

    tag = db.Column(db.Text)

    comments_num = db.Column(db.Integer)
    allow_comment = db.Column(db.Boolean)

    def __init__(self, title, content, user, allow_comment=True, public_time=int(time.time())):
        self.title = title
        self.content = content
        self.user = user
        self.public_time = public_time
        self.update_time = public_time
        self.comments_num = 0
        self.allow_comment = allow_comment

    def __repr__(self):
        return "<Article %r>" % self.title

    def save(self):
        db.session.add(self)
        db.session.commit()


class Comment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text)

    article_id = db.Column(db.Integer, db.ForeignKey("article.id"))
    article = db.relationship("Article", backref=db.backref("comments", lazy='dynamic'))

    user_id = db.Column(db.Integer, db.ForeignKey("user.id"))
    user = db.relationship("User", backref=db.backref("comments", lazy='dynamic'))

    public_time = db.Column(db.Integer)  # googbye at 2038-1-19

    def __init__(self, content, article, user, public_time=int(time.time())):
        self.content = content
        self.article = article
        self.user = user
        self.public_time = public_time

    def __repr__(self):
        return "<Comment %r>" % self.content

    def save(self):
        db.session.add(self)
        db.session.commit()